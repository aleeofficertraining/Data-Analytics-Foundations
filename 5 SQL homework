--here
-- -----------------------------------------------------------------
-- WARM UPS: Type the following commands to build muscle memory. --
-- - ----------------------------------------------------------------
-- to run the code remove the -- before Select
-- 1. [Grouping by multiple columns]: 
-- select * from purchases;
-- SELECT state, zipcode, COUNT(user_id) FROM purchases GROUP BY state, zipcode;


-- 2. [Group by using a HAVING filter]:
-- SELECT state, COUNT(user_id) FROM purchases GROUP BY state HAVING COUNT(user_id) > 100;

-- 3. [Multiple-value subquery]: 
-- SELECT * FROM purchases WHERE user_id IN (SELECT user_id FROM users WHERE email LIKE '%@gmail.com');

-- 4. [Using alias in filter]: 
-- SELECT name, email FROM users AS u JOIN purchases AS p ON p.user_id=u.user_id WHERE u.email LIKE '%@gmail.com';


-- 5. [Single-value subquery]: 
-- select max(price) from products;
-- select * from purchase_items where price = (select max(price) from products);

-- 6. [Multiple-value subquery]: 
-- select * from purchases where user_id in (select user_id from users where email like '%@gmail.com');
-- select user_id from users where email like '%@gmail.com';

-- or (select user_id from users where email like '%@gmail.com')

--------------------------------------------------------
-- EXERCISES: Answer using the techniques from above. --
--------------------------------------------------------

-- 1. Find the most recent purchase made by each user.
-- select max(created_at), user_id from purchases group by user_id; 

-- 2. Find the oldest purchase made by a user with a yahoo email address.
-- SELECT * FROM purchases 
-- WHERE user_id IN (SELECT user_id FROM users
-- WHERE email LIKE '%@gmail.com')
-- ORDER BY created_at
-- LIMIT 1;

-- 3. Find all the users' emails who made at least one purchase from the state of NY.
-- SELECT * FROM users WHERE user_id IN
-- (SELECT user_id FROM purchases WHERE state = 'NY');

-- select * from users;
-- select * from purchases;
-- SELECT user_id FROM purchases WHERE state = 'NY';

-- 4. Select the products that cost more than average.
-- select avg(price) from products;
-- select distinct title from products where price > 109.2;

-- SELECT * FROM products 
-- WHERE price > (SELECT AVG(price) FROM products);

-- 6. Find all the purchase_items that represent orders for the lowest-priced product.
-- SELECT * FROM purchase_items 
-- WHERE price = (SELECT MIN(price) FROM products);

-- 7. Find the most recent purchase made by a user with a Gmail email address.
-- select * from purchases where user_id in 
-- (select user_id from users where email like '%gmail.com') order by created_at desc limit 1;


-- select title 
-- from products p1
-- join purchase_items pi2 
-- on p1.product_id  = pi2.product_id  
-- where status = 'returned';



-- 8. List the titles of the products that were ever returned in quantities greater than 4.

-- select * from products;
-- select * from purchase_items;

-- select title from products where product_id in 
-- (select product_id from purchase_items where quantity > 4 and status = "Returned");


-- - -------------------------------------
-- EXTRA CREDIT: If you finish early. --
-- --------------------------------------

-- 1. Use the DATEPART() function to find the number of users created during each day of the week.
--    Hint: Use DW as the first input

-- SELECT DATE_PART('dow', created_at) + 1, COUNT(*)
-- FROM users
-- GROUP BY DATE_PART('dow', created_at) + 1 order by 2;

-- 2. How about each day of the month?

-- SELECT DATE_PART('month', created_at) + 1, COUNT(*)
-- FROM users
-- GROUP BY DATE_PART('month', created_at) + 1 order by 2;

