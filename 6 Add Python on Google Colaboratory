--Google Drive +New Google Colaboratory
--       If Colaboratory is not there, go to Connect More Apps. Look for Colabs and Install it.  
--      Make it the default for files you can open.
--      Now, when you go to New, you will see Google Colaboratory.      
--Change background:  Change the background which is white.  Go to Tools, Settings, Theme --> change to dark.
--Show line numbers:  Go to Tools, Settings, Editor, Show line numbers. 
--// #  hashtag or hashtag is to do commenting code
--Run a python notebook:  Use arrow - something using a play button to connect and initialize. 
--Use code:   Google Colab left shows:  +Code  +Text.   We will use Code all the time.

--Naming file:   At the top left of the screen, the file is named Untitled.ipynb.  You can click and rename to Python Basics. 
--               Press enter and the name is saved.


--File-->New notebook

--Lesson 1: Create text to stay organized.  
--How do I turn code cell into regular text?

--Large header text: Type #Python basics cell into a text cell.
-- Ctrl+m m    (m twice) which turns the code cell into a large header text cell.
--It automatically subdivides the notebook into sections.

--Icons on right each cell:  After you type something, there are icons on the right side, to Add comment, edit the cell, link to cell, 
--                           delete cell.  Press control Z to undo.

--print('Hello world')  single quote.  Then Press Shift + Enter which runs the cell.
--  In Google Colab, we use parentheses ( ) and single quote.  In Chapter 1 book using Windows, the book shows no ( ), uses double quotes.

--  Shift+Enter to run the cell.

-- Data type is called String -- what is in parenthesis.
-- print('Your Name: Angela Lee')
-- print('Why Are you here: To learn python ')
-- print('Why do you want to learn Python: To code in healthcare')

--  ======================== =========================
--Python is a dynamic language.  
-- #1. Print things.
-- #2. Do Math.   
--It can bring strings in via print.  It can also calculate. 
--Mathematical operations.  Press Shift + Enter to run the cell.
--12 * 4  Press Shift+Enter and get 48.
--23 -5   Press Shift+Enter and get  18
--PAMDAS Parentheses Exponents Multiplication Division Addition Subtraction.
--% is modulus used for division

-- ==================== =====================
-- Table of Contents 
-- On the far left side is a column.  The first item is Table of Contents.  Variables is a new section in TOCs.
-- You can minimize your sections with the little arrow next to each section word like Variables.

-- #Variables  Press Ctrl+ m m 
--(this is Chapter 4 in the book).
--A variable is a container to hold stuff in.  Think of it literally as a bucket. 
--Python is dynamic meaning you do not have to declare a variable before you use it.  What does that mean?   You can create a bucket with a name called oranges.
--You need to give it an “assignment” which one is the equal sign.
--The word oranges is holding oranges.  To describe it you use a data type which we already use called a string.  By string, I mean in quotes oranges. 
--This container is holding a string which says this is a bunch of oranges.
--oranges = 'this is a bunch of oranges'

--To print, I don’t have to say the whole string anymore because it is in the container. So I simply say oranges. 
--print(oranges)  Press Shift+Enter and get the next line:
--this is a bunch of oranges

--Variables – the name implies that it can be changed. 
--You can change the container to be whatever you want.  

--For the variable you create,
--name it as whatever is inside the variable, or related to the variable.
--This string is a string and means absolutely nothing. 

--What does that mean?
--I call the oranges = ‘apples’ Does that make sense?  Have you ever ordered a package of oranges that has apples inside. That would be annoying and confusing.  
--A string means absolutely nothing because it’s a string.
--This time I call the variable var.  you can name it whatever you want.
--var = 3   make var equal to 3.   I will make a bunch of them.
--var2 = 5  change it to var2 = 5.7
--var3 = ‘this is another  variable’

--If I say var2.
--It can hold different types of variables.   How do we know what kind of types of a variable there are?  In Python, you can ask what type of variable it is.   Type is a built in function you do not have to install, and use it.  Since this is a method, you can say what type of variable is var.
--Type(var)  Type(var2)  Type(var3)  - int is integer, Float is decimal, str is string
--String is a sequence of characters

-- var is not capitalized


-- ==================================================================

-- # Numbers  Ctrl + m + m
-- a = 14   Press return
-- b = 4    Press return
--print(a + b) Press Shift + Enter  there is also print(a * b) and also print(a - b)
--print(a / b)  equals 3.5 and also print(a // b) equals 3
--print(a % b) equals 2 which is modulus which is the remainder
--( 5 + ((20 / 4) * 2) - 7)  equals 8
--# Division and Multiplication has highest priority in python
--# These operators work from left to right

-- =================================================================
-- variable, type of variable, data types (string, integer, float which is a decimal)
-- how to print stuff
-- how to calculate 


-- #Practical Python  Ctrl + m + m
-- length = 12
-- width = 23
-- area_of_a_rectangle = length * width
-- print (area_of_a_rectangle)  which then gives answer 276

-- Print formatting = is to print your stuff and format your text 
--      Makes our printing look pretty.  There are several ways to do this.
-- print ('The area of a rectangle is', area_of_a_rectangle, 'meters squared'
--  leads to the result of The area of a rectangle is 276 meters squared

==Concatenation = pushing or printing different data types together into one statement.
==In above example, it is:
==string number string

--When using plus sign +, You can only concatenate string to string.  And number to number.  No commas needed.
--print ('The area of a rectangle is '+ str(area_of_a_rectangle) + ' meters squared')
-- The area of a rectangle is 276 meters squared

--called what?  F-string formatting
--print(f'The area of a rectangle is {area_of_a_rectangle} meters squared')
--The area of a rectangle is 276 meters squared

- ==============================================================
--Group exercise on Cars
- ===============================================================

--Collection Data Types - created new file
--•	Lists
--•	Concatenation
--•	Dictionaries
--•	Tuples
--•	Sets

--Lists

--my_list = ["Hello", 100, 23.47]
--# In this line, I have created a list and assigned the values "["Hello", 100, 23.47]"
--# When creating a list, we must use squared bracket '[]'
--# we use the assignment operation '=' to assign values to a variable which in this case creates a list.

--Collection Data type = is a data type available that can hold a collection of things.
--Traits:
--•	Square brackets [ ] 
--•	Use assign operator which is = 
--•	String, integer and a float
--type(my_list) this results in the answer :
--list

--second_list = ["one", "two", "three"]

--# Concatenation Ctrl + m m 
-- Concatenate lists = I can combine or smash together my first list w my 2nd list.

--Empty list = [ ]
--How to create an empty list.
--I created an empty list.  Now that my list is created, I can add to it.
--But before we do this, 
--We will cover another concept called Indexing.

--#Indexing
--Let’s create a list of student names.
--students = [‘Ana’, ‘Grace’, ‘Angela’, ‘Dave’, ‘Che’]
--       0	     1	     2	        3          4
--We can do the technique of indexing, access each and every one of these elements on the list. How do I do that?
--Type 1st the name of my list which is students, then using square brackets without any operator like the equal sign, allows me to index or to select specific elements of the list.  The elements are separated by a comma as you see.
--If I put element zero 0, the first name comes up.  Everything begins at zero, for most programming languages.

--students [3]
--‘Dave’

--Why? Say I want to access within the element 4 which is index 3. name Dave, this is a string. I can also index to a string. Here are more examples:
--Element 4 which is index 3.
--I’m going to create a string and call it my_string.   This is like a variable like before.
--If I want to access within an element within the string, I can access the same thing I do with a list. 

--my_string = ‘This is another string’
--my_string[4]  It’s taking the space within the string. The space is a character.

--Within a string, just like in a list,
--Indexing works with 0 to the last whatever n value of string that is.
--What if I want to access the last element in a list?  I don’t know how many elements I have. In computer science, the last element of a list, or in an array, or string, is always n minus 1.  So, to access the last element, access -1.
--===================================
--Next element is called Slicing. 

--#Slicing  Ctrl + m + m
--I have my students list and am going to print it out again here:
--students
--['Ana', 'Grace', 'Angela', 'Dave', 'Cheryse']

--[Angela: IT know how how do I make my print screen button print the 2nd screen monitor]
--What if I want only these 3 names?  In order to slice, 
--students[1:3]
--['Grace', 'Angela']

--students[1:4]
--['Grace', 'Angela', 'Dave']

--students[:4] implies includes the zero 0.
--students[:4]
--['Ana', 'Grace', 'Angela', 'Dave']

--I added this exercise below:
--students[:5]
--['Ana', 'Grace', 'Angela', 'Dave', 'Cheryse']

--#create comments for the code we went through. Be as descriptive and detailed as possible
--my_list = ["Hello", 100, 23.47]
--# In this line, I have created a list and assigned the values "["Hello", 100, 23.47]"
--# When creating a list, we must use squared bracket '[]'
--#we use the assignment operation '=' to assign values to a variable which is the case creates a list


--#create comments for the code we went through. Be as descriptive and detailed as possible

--#single line code with comments, press return after each line
--#below is multi-line comments, press return after each line

--The above is for single line comments.
--For multi-line comments, use the following and be consistent:
--my_list
--'''

--''' 


--‘\n\n\n’
--'''
--Start with single quote three times 
--Write your text 
--End with single quote three times
--'''

--\nStart with single quote three times \nWrite your text \nEnd with single quote three times\n

--type(my_list)
--“””
--The type() method is a built-in function that allows me to understand the type of variable or object I am working with.
--“””
--Everything in Python is an object.

--import this     Shift+Enter and get the following:
--The Zen of Python, by Tim Peters
--Beautiful is better than ugly.
--Explicit is better than implicit.
--Simple is better than complex.
--Complex is better than complicated.
--Flat is better than nested.
--Sparse is better than dense.
--Readability counts.
--Special cases aren't special enough to break the rules.
--Although practicality beats purity.
--Errors should never pass silently.
--Unless explicitly silenced.
--In the face of ambiguity, refuse the temptation to guess.
--There should be one-- and preferably only one --obvious way to do it.
--Although that way may not be obvious at first unless you're Dutch.
--Now is better than never.
--Although never is often better than *right* now.
--If the implementation is hard to explain, it's a bad idea.
--If the implementation is easy to explain, it may be a good idea.
--Namespaces are one honking great idea -- let's do more of those!

--"""
--How to Save python colaboratory file in Google Drive
--Create Material
--Save a copy in Drive
--The file will save as a Copy of the file and reverts to a folder in my own Drive.
--"""

--Concatenating more
--my_list
--['Hello', 100, 23.47]

--second_list
--['one', 'two', 'three']

--new_list=my_list + second_list

--new_list
--['Hello', 100, 23.47, 'one', 'two', 'three']


--#Indexing continued   Ctrl+m+m
--You can use numbers to “index” into a list, meaning you can use numbers to find out what’s in lists. You should know this about lists by now, but make sure you understand that you can only use numbers to get items out of a list.
--#A., Shaw Zed. Learn Python the Hard Way (Zed Shaw's Hard Way Series) (p. 132). Pearson Education. Kindle Edition.
--things = ['a', 'b', 'c', 'd']   #Shift + Enter
--print things[1]   #Shift + Enter
--b
--things[1] = 'z'  #Shift + Enter
--print things[1]   #Shift + Enter
--z
--print things  #Shift + Enter
--['a', 'z', 'c', 'd']
--#A., Shaw Zed. Learn Python the Hard Way (Zed Shaw's Hard Way Series) (p. 132).

-- ========================================================================================================================
--October 25, 2022 class
--Collection Data Types – created new file
--•	Lists
--•	Concatenation
--•	Indexing
--•	Dictionaries
--•	Tuples
--•	Sets

--#Dictionary Ctrl + m + m
--my_dict = {“key1” : “value1” , “key2” : “value2”}
--# In this line, I have created a dictionary and assigned the values “key1” : “value1” , “key2” : “value2”
--# A dictionary has a key with a value
--# When creating a dictionary, we must use curly bracket '{}'
--# we use the assignment operation '=' to assign values to a variable which is this case creates a dictionary.

--You can use numbers to “index” into a list, meaning you can use numbers to find out what’s in lists. You should know this about lists by now, but make sure you understand that you can only use numbers to get items out of a list.

--Dictionaries is in Chapter 39 in the text.
--What a dict does is let you use anything, not just numbers. Yes, a dict associates one thing to another, no matter what it is.
--You will see that instead of just numbers we’re using strings to say what we want from the stuff dictionary.
--stuff = {'name': 'Zed', 'age': 36, 'height': 6*12+2}
-->>> print stuff['name']
--Zed
--A., Shaw Zed. Learn Python the Hard Way (Zed Shaw's Hard Way Series) (p. 132). 

--# In a dictionary, I am defining a variable

--What is contained is a pair of items within a curly bracket.

--If I want to give a particular value to a key, I can call the dictionary again. So, everything begins with the name of the variable.
--A list is for an ordered list of items. A dictionary (or dict) is for matching some items (called “keys”) to other items (called “values”).
--A., Shaw Zed. Learn Python the Hard Way (Zed Shaw's Hard Way Series) (pp. 135-136).
--Dictionaries are used to store data values in key:value pairs. 
--A dictionary is a collection which is ordered*, changeable and does not allow duplicates. 
--*As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.
--Dictionaries are written with curly brackets, and have keys and values:
--(Fromhttps://www.w3schools.com/python/python_dictionaries.asp)

-->>> stuff = {'name': 'Zed', 'age': 36, 'height': 6*12+2}
--  >>> print stuff['name']
--    Zed
-->>> print stuff['age']
--    36
--    >>> print stuff['height']
--    74
--    >>> stuff['city'] = "San Francisco"
--    >>> print stuff['city']
--    San Francisco
--    >>>

--We can also put new things into the dictionary with strings. It doesn’t have to be strings though. We can also do this:
-->>> stuff[1] = "Wow"
--    >>> stuff[2] = "Neato"
--    >>> print stuff[1]
--    Wow
--    >>> print stuff[2]
--    Neato
--    >>> print stuff
--    {'city': 'San Francisco', 2: 'Neato',
--        'name': 'Zed', 1: 'Wow', 'age': 36,
--        'height': 74}
--    >>>
--In this code I used numbers, and then you can see there are numbers and strings as keys in the dict when I print it. I could use anything—well, almost, but just pretend you can use anything for now.

--A., Shaw Zed. Learn Python the Hard Way (Zed Shaw's Hard Way Series) (p. 133). Pearson Education. Kindle Edition.
