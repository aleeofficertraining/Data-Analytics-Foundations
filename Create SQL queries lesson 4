--WARM UPS: Type the following commands to build muscle memory. --
-- 1. [Grouping by one column: select state, count(id) from purchases group by state]: I would do Select * from purchases; to get a sense of the data first. 
--select distinct state from purchases p;
--select state, count (user_id) from purchases group by state;
-- 2. [Grouping by multiple columns: select state, zipcode, count(id) from purchases group by state, zipcode]: 
--select state, zipcode, count (user_id) from purchases group by state, zipcode;
--[My spinoff is that I would also order by state]: select state, zipcode, count(user_id) from purchases group by state, zipcode order by state;
-- EXERCISES: Answer using the techniques from above. --
--
--1. [Find the most recent purchase made within each state.]:
--select state, MAX (created_at) from purchases group by state;
--2. Use the purchase_items table to find the total number of each product_id sold.
-- Not sufficient: select product_id, quantity from purchase_items; ïƒŸis not sufficient, it brings up the whole running list of each product_id with its quantity.
--this is what the class chose to do which is not correct: select product_id, count(*) from purchase_items group by product_id;
--select product_id, count(*)
--from purchase_items
--group by product_id;
--This is what I used and gets the correct answer: Select product_id, sum(quantity) from purchase_items group by product_id order by product_id;
-- [3. Use the purchase_items table to see the total dollar amount of items in each status: Delivered, Returned, Pending]:  
--select status, sum(price*quantity) 
--from purchase_items
--group by status;
--[4. In the products table, find how many products are under each set of tags.]: 
--select tags, count(*) from products group by tags;
--[5. Modify the previous query to find how many products over $10 are under each set of tags.]:
--select tags, count(*) from products where price >10 group by tags;
-- [6. Use the user table to find out how many purchases each user made.]:
--this is what the instructor wrote and I don't agree: select user_id, count(*) from purchases group by user_id;
--[7. What is the first purchase that was made in each state, in each zipcode? 
--(No, zipcodes do not repeat between states, but write your query as though they did.)]:
--select purchase_id, state, zipcode, min(created_at) from purchases group by purchase_id, state, zipcode;
-- EXTRA CREDIT: If you finish early. --
--
-- 1. The DATE_PART() function extracts whichever part of the
--  timestamp you want. E.g. DATE_PART(year FROM '2001-02-16 20:38:40')
--  returns 2001. Use DATE_PART() to extract which calendar month
--  each user was created in.
-- select user_id, date_part('month', created_at) from users group by user_id;
-- 2. Use DATEPART() and a group by statement to count how many
--    users were created in each calendar month.
--select date_part ('month', created_at), count(*) from users group by date_part ('month', created_at);
---- 3. Use the DATEPART() function to find the number of users
--    created during each day of the week.
--    Hint: Use DAY as the first input
-- select date_part ('dow', created_at)+1, count(*) from users group by date_part ('dow', created_at)+1 order by 2;
